{"version":3,"sources":["logo.svg","components/MenuForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MenuForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","bind","assertThisInitialized","event","submitFunction","preventDefault","console","log","react_default","a","createElement","onSubmit","type","value","Component","App","App_WeeklyMenu","Meal","meal","dishes","map","dish","name","React","DailyMenu","dailyMenu","meals","App_Meal","WeeklyMenu","state","historicalData","fetchMenu","className","components_MenuForm","border","id","weeklyPlan","weeklyMenu","dailyMenus","App_DailyMenu","_this2","fetch","then","response","json","setState","catch","e","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f1e428ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass MenuForm extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    this.props.submitFunction();\n    event.preventDefault();\n  }\n\n  render() {\n  console.log(\"menu render\");\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type=\"text\" />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n\nMenuForm.propTypes = {\n  submitFunction: PropTypes.func\n};\n\nexport default MenuForm\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './style.css';\nimport MenuForm from './components/MenuForm.js'\n\nclass App extends Component {\n  render() {\n    return (\n      <WeeklyMenu />\n    );\n  }\n}\n\nclass Meal extends React.Component {\n    render() {\n       return <td>{this.props.meal.dishes.map(dish => <p>{dish.name}</p>)}</td>\n    }\n}\n\nclass DailyMenu extends React.Component {\n\n    render() {\n        return (\n            <tr>\n                {this.props.dailyMenu.meals.map(\n                    meal => <Meal meal={meal} />\n                )}\n            </tr>\n        )\n    }\n}\n\nclass WeeklyMenu extends React.Component {\n\n    constructor (props) {\n        super(props)\n        this.state = {historicalData: null}\n\n        this.fetchMenu = this.fetchMenu.bind(this)\n    }\n\n    render() {\n    console.log(\"render\")\n            return (\n                <div className=\"app\">\n                  <MenuForm submitFunction={this.fetchMenu}/>\n                  <div className=\"container\">\n                          <div className=\"row\">\n                            <div className=\"col s12 board\">\n                              <table border=\"1\" id=\"simple-board\">\n                                 <tbody>\n                      {this.state.historicalData ?\n                        this.state.historicalData.weeklyPlan.weeklyMenu.dailyMenus.map(\n                        dailyMenu=><DailyMenu dailyMenu={dailyMenu} />\n                        )\n                        : null\n                      }\n                                </tbody>\n                               </table>\n                            </div>\n                          </div>\n                        </div>\n                </div>\n            )\n    }\n\n      fetchMenu () {\n        fetch('http://localhost:8080/api/menu')\n          .then(response => response.json())\n          .then(response => this.setState({historicalData: response}))\n          .catch(e => e)\n      }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<React.Fragment>\n    <header className=\"site-header\">\n    </header>\n    <section className=\"hero text-center\">\n        <div className=\"container-sm\">\n            <App />\n        </div>\n    </section>\n</React.Fragment>\n    ,\ndocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}